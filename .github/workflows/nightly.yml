name: Deploy Nightly
on:
  # This can be used to automatically publish nightlies at UTC nighttime
  schedule:
    - cron: '0 2 * * *' # run at 2 AM UTC
  # This can be used to allow manually triggering nightlies from the web interface
  workflow_dispatch:

jobs:
  nightly:
    name: Deploy nightly
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
  
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build nightly with Gradle
        run: ./gradlew :app:assembleNightly
      - name: Lidst files
        run: ls
      - name: Show pwd
        run: pwd

      - name: Deploy release
        uses: WebFreak001/deploy-nightly@v3.1.0
        with:
          upload_url: https://uploads.github.com/repos/aimok04/kitshn_debug/releases/171844203/assets # find out this value by opening https://api.github.com/repos/<owner>/<repo>/releases in your browser and copy the full "upload_url" value including the {?name,label} part
          release_id: 171844203 # same as above (id can just be taken out the upload_url, it's used to find old releases)
          asset_path: ./app/nightly/app-nightly.apk # path to archive to upload
          asset_name: kitshn-nightly-$$.zip # name to upload the release as, use $$ to insert date (YYYYMMDD) and 6 letter commit hash
          asset_content_type: application/vnd.android.package-archive # required by GitHub API
          max_releases: 1 # optional, if there are more releases than this matching the asset_name, the oldest ones are going to be deleted
          ignore_hash: true # optional, if there is already a release associated with the repo's current commit, should we go ahead and upload the asset anyway.
